/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sb2.training.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.sb2.training.model.XyzOrg;
import com.sb2.training.model.XyzOrgModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the XyzOrg service. Represents a row in the &quot;vt_XyzOrg&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>XyzOrgModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link XyzOrgImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see XyzOrgImpl
 * @generated
 */
@ProviderType
public class XyzOrgModelImpl
	extends BaseModelImpl<XyzOrg> implements XyzOrgModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a xyz org model instance should use the <code>XyzOrg</code> interface instead.
	 */
	public static final String TABLE_NAME = "vt_XyzOrg";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"depId", Types.BIGINT},
		{"depName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("depId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("depName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table vt_XyzOrg (uuid_ VARCHAR(75) null,depId LONG not null primary key,depName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table vt_XyzOrg";

	public static final String ORDER_BY_JPQL = " ORDER BY xyzOrg.depId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY vt_XyzOrg.depId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long DEPID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public XyzOrgModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _depId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDepId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _depId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return XyzOrg.class;
	}

	@Override
	public String getModelClassName() {
		return XyzOrg.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<XyzOrg, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<XyzOrg, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<XyzOrg, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((XyzOrg)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<XyzOrg, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<XyzOrg, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(XyzOrg)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<XyzOrg, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<XyzOrg, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, XyzOrg>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			XyzOrg.class.getClassLoader(), XyzOrg.class, ModelWrapper.class);

		try {
			Constructor<XyzOrg> constructor =
				(Constructor<XyzOrg>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<XyzOrg, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<XyzOrg, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<XyzOrg, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<XyzOrg, Object>>();
		Map<String, BiConsumer<XyzOrg, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<XyzOrg, ?>>();

		attributeGetterFunctions.put("uuid", XyzOrg::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<XyzOrg, String>)XyzOrg::setUuid);
		attributeGetterFunctions.put("depId", XyzOrg::getDepId);
		attributeSetterBiConsumers.put(
			"depId", (BiConsumer<XyzOrg, Long>)XyzOrg::setDepId);
		attributeGetterFunctions.put("depName", XyzOrg::getDepName);
		attributeSetterBiConsumers.put(
			"depName", (BiConsumer<XyzOrg, String>)XyzOrg::setDepName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDepId() {
		return _depId;
	}

	@Override
	public void setDepId(long depId) {
		_depId = depId;
	}

	@Override
	public String getDepName() {
		if (_depName == null) {
			return "";
		}
		else {
			return _depName;
		}
	}

	@Override
	public void setDepName(String depName) {
		_depName = depName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, XyzOrg.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public XyzOrg toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, XyzOrg>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		XyzOrgImpl xyzOrgImpl = new XyzOrgImpl();

		xyzOrgImpl.setUuid(getUuid());
		xyzOrgImpl.setDepId(getDepId());
		xyzOrgImpl.setDepName(getDepName());

		xyzOrgImpl.resetOriginalValues();

		return xyzOrgImpl;
	}

	@Override
	public int compareTo(XyzOrg xyzOrg) {
		long primaryKey = xyzOrg.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof XyzOrg)) {
			return false;
		}

		XyzOrg xyzOrg = (XyzOrg)obj;

		long primaryKey = xyzOrg.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		XyzOrgModelImpl xyzOrgModelImpl = this;

		xyzOrgModelImpl._originalUuid = xyzOrgModelImpl._uuid;

		xyzOrgModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<XyzOrg> toCacheModel() {
		XyzOrgCacheModel xyzOrgCacheModel = new XyzOrgCacheModel();

		xyzOrgCacheModel.uuid = getUuid();

		String uuid = xyzOrgCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			xyzOrgCacheModel.uuid = null;
		}

		xyzOrgCacheModel.depId = getDepId();

		xyzOrgCacheModel.depName = getDepName();

		String depName = xyzOrgCacheModel.depName;

		if ((depName != null) && (depName.length() == 0)) {
			xyzOrgCacheModel.depName = null;
		}

		return xyzOrgCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<XyzOrg, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<XyzOrg, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<XyzOrg, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((XyzOrg)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<XyzOrg, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<XyzOrg, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<XyzOrg, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((XyzOrg)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, XyzOrg>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _depId;
	private String _depName;
	private long _columnBitmask;
	private XyzOrg _escapedModel;

}